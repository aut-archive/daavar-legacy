#!/usr/bin/env php
<?php
/**
 *
 * Notify contest crew when there is a new, correct submission (for
 * which a balloon has to be handed out). Alternatively there's also
 * a web based tool in the jury interface. This daemon and that tool
 * cannot be used at the same time.
 *
 * Part of the DOMjudge Programming Contest Jury System and licenced
 * under the GNU GPL. See README and COPYING for details.
 */
if ( isset($_SERVER['REMOTE_ADDR']) ) die ("Commandline use only");

require('../etc/domserver-static.php');
require(ETCDIR . '/domserver-config.php');

define ('SCRIPT_ID', 'balloons');
define ('LOGFILE', LOGDIR.'/balloons.log');

require(LIBDIR . '/init.php');

setup_database_connection();

$verbose = LOG_INFO;

$waittime = 5;

/**
 * Returns a text to be sent when notifying of a new balloon.
 */
function notification_text($team, $problem, $probs_solved, $probs_data, $comment) {
	$ret =
		"A problem has been solved:\n".
		"\n".
		(empty($team['room']) ? "" : "Location: ".$team['room']."\n" ) .
		"Team:     ".$team['name']." (t".$team['teamid'].")\n".
		"Problem:  ".$problem.": ".$probs_data[$problem]['name'].
		(empty($probs_data[$problem]['color']) ? "" : " (colour: ".$probs_data[$problem]['color'].")" ) . "\n\n" .
		"Current balloon status for this team:\n";

	foreach($probs_solved as $probid) {
		$ret .= " - " . $probs_data[$probid]['shortname'] .": " . $probs_data[$probid]['name'] .
			(empty($probs_data[$probid]['color']) ? "" : " (colour: ".$probs_data[$probid]['color'].")" )."\n";
	}

	if ( $comment ) {
		$ret .= "\n$comment\n";
	}

	return $ret;
}

$cid = null;
$infreeze = FALSE;

logmsg(LOG_NOTICE, "Balloon notifications started [DOMjudge/".DOMJUDGE_VERSION."]");

initsignals();

// Constantly check database for new correct submissions
while ( TRUE ) {

	// Check whether we have received an exit signal
	if ( function_exists('pcntl_signal_dispatch') ) pcntl_signal_dispatch();
	if ( $exitsignalled ) {
		logmsg(LOG_NOTICE, "Received signal, exiting.");
		exit;
	}

	$newcdata = getCurContest(TRUE);
	$newcid = $newcdata['cid'];
	$oldcid = $cid;
	if ( $oldcid !== $newcid ) {
		logmsg(LOG_NOTICE, "Contest has changed from " .
		       (isset($oldcid) ? "c$oldcid" : "none" ) . " to " .
		       (isset($newcid) ? "c$newcid" : "none" ) );
		$cid = $newcid;
		$cdata = $newcdata;
	}

	if ( isset($cdata['freezetime']) && ! $infreeze &&
	     difftime(now(), $cdata['freezetime']) > 0 ) {
		$infreeze = TRUE;
		logmsg(LOG_NOTICE, "Scoreboard is frozen since " . $cdata['freezetime']);
	}
	$freezecond = '';
	if ( ! dbconfig_get('show_balloons_postfreeze',0) && isset($cdata['freezetime']) ) {
		$freezecond = 'AND submittime <= "' . $cdata['freezetime'] . '"';
	}

	do {

		$res = $DB->q("SELECT b.*, s.probid, s.submittime,
		               t.teamid, t.name AS teamname, t.room, c.name AS catname
		               FROM balloon b
		               LEFT JOIN submission s USING (submitid)
		               LEFT JOIN team t ON (t.teamid = s.teamid)
		               LEFT JOIN team_category c USING(categoryid)
		               WHERE s.cid = %i AND b.done = 0 $freezecond
		               ORDER BY submitid ASC",
		              $cid);

		while ( $row = $res->next() ) {
			$team = array ('name'   => $row['teamname'],
			               'room'   => $row['room'],
			               'teamid' => $row['teamid']);

			logmsg(LOG_DEBUG,"New problem solved: p".$row['probid'].
				   " by team t".$row['teamid']);

			if ( defined('BALLOON_CMD') && BALLOON_CMD ) {

				$probs_solved = $DB->q('COLUMN SELECT probid FROM scorecache_jury
				                        WHERE cid = %i AND teamid = %i AND is_correct = 1',
				                       $cid, $row['teamid']);
				$probs_data = $DB->q('KEYTABLE SELECT probid AS ARRAYKEY,shortname,name,color
				                      FROM problem WHERE cid = %i', $cid);

				// current limitation is that this gets reset if the balloon daemon is restarted
				$comment = '';
				if ( !isset($nonfirst_contest) ) {
					$comment = 'first in contest';
					$nonfirst_contest = true;
				} else {
					if (!isset($nonfirst_problem[$row['probid']])) {
						$comment = 'first for problem';
						$nonfirst_problem[$row['probid']] = true;
					}
					if (!isset($nonfirst_team[$row['teamid']])) {
						$comment = 'first for team';
						$nonfirst_team[$row['teamid']] = true;
					}
				}

				logmsg(LOG_INFO,"Sending notification: team t".
					   $row['teamid'].", problem p".$row['probid'].".");

				logmsg(LOG_DEBUG,"Running command: '".BALLOON_CMD."'");

				$handle = popen(BALLOON_CMD, 'w');
				if ( ! $handle ) error("Could not run command '".BALLOON_CMD."'");

				fwrite($handle,notification_text($team,$row['probid'],$probs_solved, $probs_data, $comment));
				if ( ($exitcode = pclose($handle))!=0 ) {
					warning("Notification command exited with exitcode $exitcode");
				}
			}

			$DB->q('UPDATE balloon SET done=1
			        WHERE balloonid = %i',
			       $row['balloonid']);
		}

	} while ( $res->count()!=0 );

	sleep($waittime);
}
